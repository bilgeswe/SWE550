Variables and Aliases

Learn how to handle asynchronous code in Cypress, when to assign variables, how to use aliases to share objects between hooks and tests, and how to alias DOM elements, intercepts, and requests.

# Variables and Aliases

What you'll learn:
- Common patterns for handling asynchronous code in Cypress
- When to assign variables and when not to
- How to use aliases to share objects between hooks and tests
- Pitfalls with using `this` and how to avoid them
- How to alias DOM elements, intercepts, and requests

## Asynchronous Code
Cypress commands are asynchronous and cannot be assigned directly. See example: examples/async_example.js

### Closures
Use .then() to access what each Cypress command yields. This creates a closure that enables keeping references to work done in previous commands.

### Debugging
Using .then() functions is an excellent opportunity to use debugger. See example: examples/debugging_example.js

## Variables
Typically in Cypress you hardly need to ever use const, let, or var. The exception is when dealing with mutable objects. See example: examples/variables_example.js

## Aliases
Aliases are a powerful construct in Cypress that have many uses. They help share objects between hooks and tests.

### Sharing Context
The simplest way to use aliases is to share context. See example: examples/aliases_example.js

### Elements
Aliases have special characteristics when being used with DOM elements. See example: examples/elements_aliases.js

### Intercepts
Aliases can be used with cy.intercept() to:
- Ensure your application makes the intended requests
- Wait for your server to send the response
- Access the actual request object for assertions

See example: examples/intercepts_example.js

### Requests
Aliases can also be used with requests. See example: examples/requests_example.js

## Important Notes
- Aliases are reset before each test
- Use beforeEach instead of before for creating aliases
- Avoid using arrow functions when accessing aliases with this.*
- Use cy.get('@alias') to avoid this.* syntax 