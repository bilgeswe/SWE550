Cypress Testing Guide Summary

Key Concepts:
• Cypress is an end-to-end testing framework that provides a modern way to test web applications
• Tests are written in JavaScript and run in a real browser
• Cypress automatically handles waiting and retrying for elements

Core Features:
• Automatic waiting and retrying
• Real-time reloading
• Time travel debugging
• Automatic screenshots and videos
• Cross-browser testing

Basic Test Structure:
See: examples/basic_test_structure.js

Key Commands:
• cy.visit() - Navigate to a URL
• cy.get() - Query DOM elements
• cy.contains() - Find elements by content
• cy.click() - Click on elements
• cy.type() - Type into input fields
• cy.should() - Make assertions

Important Concepts:
1. Command Chaining:
See: examples/command_chaining.js

2. Assertions:
See: examples/assertions.js

3. Timeouts:
• Default timeout: 4000ms
• Can be modified per command:
See: examples/timeouts.js

Best Practices:
• Write deterministic tests
• Avoid conditional testing
• Use meaningful selectors
• Keep tests independent
• Use data-* attributes for testing

Common Patterns:
1. Page Object Model:
See: examples/page_object_model.js

2. Custom Commands:
See: examples/custom_commands.js

Error Handling:
• Cypress automatically retries failed assertions
• Commands fail fast when they can't be retried
• Screenshots are taken on failure
• Videos can be recorded of test runs

Remember:
• Cypress commands are asynchronous
• Commands run serially
• Each command waits for the previous to complete
• Assertions automatically retry
• Timeouts can be configured globally or per command 